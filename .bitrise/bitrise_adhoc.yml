---
format_version: '13'
workflows:
  pr_adhoc_builds:
  _pr_adhoc_build:
    steps:
    - set-xcode-build-number@1:
        inputs:
        - plist_path: "$INST_XCODE_SCHEME/$INST_XCODE_SCHEME/Resources/Info.plist"
    - bitrise-step-stamp-appicon-with-version-number@1:
        inputs:
        - stamp_version: PR
        - stamp_build_number: "$PR_NUMBER"
        - stamp_path_to_icons: "$INST_XCODE_SCHEME/$INST_XCODE_SCHEME/Resources/Assets.xcassets/AppIcon.appiconset"
    - xcode-archive@5:
        inputs:
        - distribution_method: ad-hoc
        - perform_clean_action: 'yes'
        - automatic_code_signing: api-key
        - icloud_container_environment: Production
        - scheme: "$INST_XCODE_SCHEME"
    - deploy-to-bitrise-io@2:
        inputs:
        - notify_user_groups: none
    - create-install-page-qr-code@1: {}
    - comment-on-github-pull-request@0:
        inputs:
        - body: |
            <details><summary>$INST_XCODE_SCHEME Build QR Code</summary>
            <img src="$BITRISE_PUBLIC_INSTALL_PAGE_QR_CODE_IMAGE_URL" />
            </details>
        - update_comment_tag: "$INST_XCODE_SCHEME_Build"
        - personal_access_token: "$DANGER_GITHUB_API_TOKEN"
        is_always_run: false
    summary: This workflow stamps the app icon and creates a QR code installable ad-hoc
      build used for pull request testing.
    description: "This step expects the following environment variable: \n$INST_XCODE_SCHEME
      (e.g., Horizon)"
  _pr_adhoc_build_discovery:
    steps:
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            # Assuming our commit message is in the correct format, we decide which tests to go on with
            # $GIT_CLONE_COMMIT_MESSAGE_BODY
            echo "Git msg: ${GIT_CLONE_COMMIT_MESSAGE_BODY}"
            echo "Bitrise Pull Request: "
            echo $BITRISE_PULL_REQUEST
            echo "Bitrise Git Message: "
            echo $BITRISE_GIT_MESSAGE

            if [[ ! -z $BITRISE_PULL_REQUEST ]]; then
              envman add --key PR_NUMBER --value $BITRISE_PULL_REQUEST
            else
              envman add --key PR_NUMBER --value "NOT_PR"
            fi
            if [[ $BITRISE_GIT_MESSAGE == *"Student"* ]]; then
              envman add --key REQUIRE_STUDENT --value "true"
            fi

            if [[ $BITRISE_GIT_MESSAGE == *"Teacher"* ]]; then
              envman add --key REQUIRE_TEACHER --value "true"
            fi

            if [[ $BITRISE_GIT_MESSAGE == *"Parent"* ]]; then
              envman add --key REQUIRE_PARENT --value "true"
            fi

            if [[ $BITRISE_GIT_MESSAGE == *"Horizon"* ]]; then
              envman add --key REQUIRE_HORIZON --value "true"
            fi

            if [[ $BITRISE_GIT_MESSAGE == *"affects: All"* ]]; then
              envman add --key REQUIRE_PARENT --value "true" &&
              envman add --key REQUIRE_TEACHER --value "true" &&
              envman add --key REQUIRE_STUDENT --value "true" &&
              envman add --key REQUIRE_HORIZON --value
            fi
        title: Discover Which Apps To Build
    summary: |-
      This step analyzes the pull request's description and decides which apps to build.

      Outputs if conditions are met for each app:
      - $REQUIRE_PARENT=true
      - $REQUIRE_TEACHER=true
      - $REQUIRE_STUDENT=true
      - $REQUIRE_HORIZON=true