//
// This file is part of Canvas.
// Copyright (C) 2025-present  Instructure, Inc.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

import CoreData
import Foundation
import Combine

public final class GetHProgramCourseUseCase: APIUseCase {
    public typealias Model = CDHProgramCourse
    private let userId: String
    private let programs: [GetHProgramCourseRequest.Parameters]
    private var subscriptions = Set<AnyCancellable>()

    // MARK: - Init

    public init(
        userId: String,
        programs: [GetHProgramCourseRequest.Parameters]
    ) {
        self.userId = userId
        self.programs = programs
    }

    public var request: GetHProgramCourseRequest {
        GetHProgramCourseRequest(userId: userId, programs: programs)
    }

    public var cacheKey: String? { programs.map { $0.cacheKey }.joined(separator: "-") }

    public func write(
        response: GetHProgramCourseResponse?,
        urlResponse _: URLResponse?,
        to client: NSManagedObjectContext
    ) {
        guard let responseData = response?.data else { return }

        for (key, container) in responseData {
            let result = parseKey(key)
            let programID = result.programID
            let courseID = result.courseID
            let enrollemtID = response?.enrollemtIDs?[courseID]
            CDHProgramCourse.save(
                container,
                programID: programID,
                courseID: courseID,
                enrollemtID: enrollemtID,
                in: client
            )
        }
    }

    /// Parses a GraphQL alias key back into its original `programID` and `courseID`.
    /// The alias key is generated by prefixing the program UUID with an underscore,
    /// replacing all dashes with underscores, and appending `ID<courseID>`.
    /// During parsing, `dropFirst` is used to remove the leading underscore that was
    /// added before firing the request, restoring the original UUID format.
    private func parseKey(_ key: String) -> (programID: String, courseID: String) {
        let parts = key.split(separator: "ID", omittingEmptySubsequences: true)
        let programID = String(parts.first?.dropFirst() ?? "").replacingOccurrences(of: "_", with: "-")
        return (programID: programID, courseID: String(parts.last ?? ""))
    }

    public func makeRequest(environment: AppEnvironment, completionHandler: @escaping RequestCallback) {
        let reuets = programs.chunked(into: 5).map { fetchCombine(request: GetHProgramCourseRequest(userId: userId, programs: $0)) }
        Publishers.MergeMany(reuets)
            .map { $0.body }
            .collect()
            .map { responses -> GetHProgramCourseResponse in
                var mergedData: [String: GetHProgramCourseResponse.ProgramCourse] = [:]
                for response in responses {
                    mergedData.merge(response.data ?? [:]) { $1 }
                }
                return GetHProgramCourseResponse(data: mergedData)
            }
            .flatMap { [weak self] courses in
                guard let self else {
                    return Just(GetHProgramCourseResponse(data: nil, enrollemtIDs: nil))
                        .setFailureType(to: Error.self)
                        .eraseToAnyPublisher()
                }
                return self.fetchCombine(request: GetCoursesEnrollmentIDRequest(userId: userId))
                    .map { enrollmentResponse in
                        let enrollments = enrollmentResponse.body.data?.legacyNode?.enrollments ?? []
                        let enrollmentsDic = Dictionary(
                            enrollments.map { ($0.course?.id ?? "", $0.id) },
                            uniquingKeysWith: { _, new in
                                return new
                            }
                        )
                        var updateCourses = courses
                        updateCourses.enrollemtIDs = enrollmentsDic
                        return updateCourses
                    }
                    .eraseToAnyPublisher()
            }
            .sinkFailureOrValue(receiveFailure: { error in
                completionHandler(nil, nil, error)
            }, receiveValue: { response in
                completionHandler(response, nil, nil)
            })
            .store(in: &subscriptions)
    }

    func fetchCombine<Request: APIRequestable>(request: Request) -> AnyPublisher<(body: Request.Response, urlResponse: HTTPURLResponse?), Error> {
        AppEnvironment.shared.api.makeRequest(request)
    }
}
