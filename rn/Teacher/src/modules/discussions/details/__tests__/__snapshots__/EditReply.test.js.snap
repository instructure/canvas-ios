// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EditReply dismisses modal activity upon save error 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarButtonColor="#008EE2"
  navBarTitleColor="#2D3B45"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "edit-discussion-reply.done-btn",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "edit-discussion-reply.attachment-btn",
      },
    ]
  }
  title="Reply"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RichTextEditor
      attachmentUploadPath="/courses/1/files"
      context="courses"
      contextID="1"
      defaultValue=""
      focusOnLoad={true}
      navigator={
        Object {
          "dismiss": [MockFunction],
          "dismissAllModals": [MockFunction],
          "isModal": false,
          "pop": [MockFunction],
          "replace": [MockFunction],
          "show": [MockFunction],
          "showWebView": [MockFunction],
          "traitCollection": [MockFunction],
        }
      }
      onChangeValue={[Function]}
      placeholder="Message"
      scrollEnabled={true}
      showToolbar="always"
    />
    <ActivityIndicator
      animating={true}
      color="#999999"
      hidesWhenStopped={true}
      size="large"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
  </View>
</Screen>
`;

exports[`EditReply renders 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarButtonColor="#008EE2"
  navBarTitleColor="#2D3B45"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "edit-discussion-reply.done-btn",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "edit-discussion-reply.attachment-btn",
      },
    ]
  }
  title="Reply"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RichTextEditor
      attachmentUploadPath="/courses/1/files"
      context="courses"
      contextID="1"
      defaultValue=""
      focusOnLoad={true}
      navigator={
        Object {
          "dismiss": [MockFunction],
          "dismissAllModals": [MockFunction],
          "isModal": false,
          "pop": [MockFunction],
          "replace": [MockFunction],
          "show": [MockFunction],
          "showWebView": [MockFunction],
          "traitCollection": [MockFunction],
        }
      }
      onChangeValue={[Function]}
      placeholder="Message"
      scrollEnabled={true}
      showToolbar="always"
    />
  </View>
</Screen>
`;

exports[`EditReply renders title correctly when editing 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarButtonColor="#008EE2"
  navBarTitleColor="#2D3B45"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "edit-discussion-reply.done-btn",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "edit-discussion-reply.attachment-btn",
      },
    ]
  }
  title="Edit"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <RichTextEditor
      attachmentUploadPath="/courses/1/files"
      context="courses"
      contextID="1"
      defaultValue=""
      focusOnLoad={true}
      navigator={
        Object {
          "dismiss": [MockFunction],
          "dismissAllModals": [MockFunction],
          "isModal": false,
          "pop": [MockFunction],
          "replace": [MockFunction],
          "show": [MockFunction],
          "showWebView": [MockFunction],
          "traitCollection": [MockFunction],
        }
      }
      onChangeValue={[Function]}
      placeholder="Message"
      scrollEnabled={true}
      showToolbar="always"
    />
  </View>
</Screen>
`;
