// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DiscussionEdit renders 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarStyle="light"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "discussions.edit.doneButton",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "discussions.edit.attachment-btn",
      },
    ]
  }
  showDismissButton={true}
  statusBarStyle="default"
  title="Edit Discussion"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <ModalOverlay
      activityIndicatorColor="#fff"
      animationType="fade"
      backgroundColor="rgba(0,0,0,0.8)"
      height={170}
      showActivityIndicator={true}
      text="Saving"
      transparent={true}
      visible={false}
      width={170}
    />
    <UnmetRequirementBanner
      backgroundColor="#EE0612"
      testID="discussions.edit.unmet-requirement-banner"
      text="Invalid field"
      visible={false}
    />
    <KeyboardAwareScrollView
      enableAutoAutomaticScroll={false}
      keyboardDismissMode="on-drag"
      keyboardShouldPersistTaps="handled"
      style={
        Object {
          "backgroundColor": "#F5F5F5",
          "flex": 1,
        }
      }
    >
      <FormLabel>
        Title
      </FormLabel>
      <RowWithTextInput
        border="both"
        defaultValue="Cursed Hollow"
        identifier="discussions.edit.titleInput"
        onChangeText={[Function]}
        onFocus={[Function]}
        placeholder="Add title (required)"
        title=""
      />
      <RequiredFieldSubscript
        testID="discussions.edit.title.validation-error"
        visible={false}
      />
      <FormLabel>
        Description
      </FormLabel>
      <View
        style={
          Object {
            "backgroundColor": "white",
            "borderBottomColor": "#C7CDD1",
            "borderBottomWidth": 0.5,
            "borderTopColor": "#C7CDD1",
            "borderTopWidth": 0.5,
            "height": 200,
          }
        }
      >
        <RichTextEditor
          attachmentUploadPath="/courses/1/files"
          contentHeight={150}
          defaultValue="Gather tribute or face my curse."
          keyboardAware={false}
          navigator={
            Object {
              "dismiss": [MockFunction],
              "dismissAllModals": [MockFunction],
              "isModal": false,
              "pop": [MockFunction],
              "replace": [MockFunction],
              "show": [MockFunction],
              "traitCollection": [MockFunction],
            }
          }
          onFocus={[Function]}
          placeholder="Add description"
          scrollEnabled={true}
          showToolbar="always"
        />
      </View>
      <FormLabel>
        Options
      </FormLabel>
      <RowWithSwitch
        border="both"
        onValueChange={[Function]}
        testID="discussions.edit.published.switch"
        title="Publish"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.discussion_type.switch"
        onValueChange={[Function]}
        title="Allow threaded replies"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.subscribed.switch"
        onValueChange={[Function]}
        title="Subscribe"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        onValueChange={[Function]}
        title="Students must post before seeing replies"
        value={false}
      />
      <View>
        <FormLabel>
          Availability
        </FormLabel>
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-delayed-post-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.delayed_post_at.row"
          title="Available From"
        />
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-lock-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.lock_at.row"
          title="Available Until"
        />
      </View>
    </KeyboardAwareScrollView>
  </View>
</Screen>
`;

exports[`DiscussionEdit renders new form 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarStyle="light"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "discussions.edit.doneButton",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "discussions.edit.attachment-btn",
      },
    ]
  }
  showDismissButton={true}
  statusBarStyle="default"
  title="New Discussion"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <ModalOverlay
      activityIndicatorColor="#fff"
      animationType="fade"
      backgroundColor="rgba(0,0,0,0.8)"
      height={170}
      showActivityIndicator={true}
      text="Saving"
      transparent={true}
      visible={false}
      width={170}
    />
    <UnmetRequirementBanner
      backgroundColor="#EE0612"
      testID="discussions.edit.unmet-requirement-banner"
      text="Invalid field"
      visible={false}
    />
    <KeyboardAwareScrollView
      enableAutoAutomaticScroll={false}
      keyboardDismissMode="on-drag"
      keyboardShouldPersistTaps="handled"
      style={
        Object {
          "backgroundColor": "#F5F5F5",
          "flex": 1,
        }
      }
    >
      <FormLabel>
        Title
      </FormLabel>
      <RowWithTextInput
        border="both"
        defaultValue={null}
        identifier="discussions.edit.titleInput"
        onChangeText={[Function]}
        onFocus={[Function]}
        placeholder="Add title (required)"
        title=""
      />
      <RequiredFieldSubscript
        testID="discussions.edit.title.validation-error"
        visible={false}
      />
      <FormLabel>
        Description
      </FormLabel>
      <View
        style={
          Object {
            "backgroundColor": "white",
            "borderBottomColor": "#C7CDD1",
            "borderBottomWidth": 0.5,
            "borderTopColor": "#C7CDD1",
            "borderTopWidth": 0.5,
            "height": 200,
          }
        }
      >
        <RichTextEditor
          attachmentUploadPath="/courses/1/files"
          contentHeight={150}
          defaultValue={null}
          keyboardAware={false}
          navigator={
            Object {
              "dismiss": [MockFunction],
              "dismissAllModals": [MockFunction],
              "isModal": false,
              "pop": [MockFunction],
              "replace": [MockFunction],
              "show": [MockFunction],
              "traitCollection": [MockFunction],
            }
          }
          onFocus={[Function]}
          placeholder="Add description"
          scrollEnabled={true}
          showToolbar="always"
        />
      </View>
      <FormLabel>
        Options
      </FormLabel>
      <RowWithSwitch
        border="both"
        onValueChange={[Function]}
        testID="discussions.edit.published.switch"
        title="Publish"
        value={null}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.discussion_type.switch"
        onValueChange={[Function]}
        title="Allow threaded replies"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        onValueChange={[Function]}
        title="Students must post before seeing replies"
        value={null}
      />
      <View>
        <FormLabel>
          Availability
        </FormLabel>
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-delayed-post-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.delayed_post_at.row"
          title="Available From"
        />
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-lock-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.lock_at.row"
          title="Available Until"
        />
      </View>
    </KeyboardAwareScrollView>
  </View>
</Screen>
`;

exports[`DiscussionEdit updates from props 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarStyle="light"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "discussions.edit.doneButton",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "discussions.edit.attachment-btn",
      },
    ]
  }
  showDismissButton={true}
  statusBarStyle="default"
  title="Edit Discussion"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <ModalOverlay
      activityIndicatorColor="#fff"
      animationType="fade"
      backgroundColor="rgba(0,0,0,0.8)"
      height={170}
      showActivityIndicator={true}
      text="Saving"
      transparent={true}
      visible={false}
      width={170}
    />
    <UnmetRequirementBanner
      backgroundColor="#EE0612"
      testID="discussions.edit.unmet-requirement-banner"
      text="Invalid field"
      visible={false}
    />
    <KeyboardAwareScrollView
      enableAutoAutomaticScroll={false}
      keyboardDismissMode="on-drag"
      keyboardShouldPersistTaps="handled"
      style={
        Object {
          "backgroundColor": "#F5F5F5",
          "flex": 1,
        }
      }
    >
      <FormLabel>
        Title
      </FormLabel>
      <RowWithTextInput
        border="both"
        defaultValue="Cursed Hollow"
        identifier="discussions.edit.titleInput"
        onChangeText={[Function]}
        onFocus={[Function]}
        placeholder="Add title (required)"
        title=""
      />
      <RequiredFieldSubscript
        testID="discussions.edit.title.validation-error"
        visible={false}
      />
      <FormLabel>
        Description
      </FormLabel>
      <View
        style={
          Object {
            "backgroundColor": "white",
            "borderBottomColor": "#C7CDD1",
            "borderBottomWidth": 0.5,
            "borderTopColor": "#C7CDD1",
            "borderTopWidth": 0.5,
            "height": 200,
          }
        }
      >
        <RichTextEditor
          attachmentUploadPath="/courses/1/files"
          contentHeight={150}
          defaultValue="Gather tribute or face my curse."
          keyboardAware={false}
          navigator={
            Object {
              "dismiss": [MockFunction],
              "dismissAllModals": [MockFunction],
              "isModal": false,
              "pop": [MockFunction],
              "replace": [MockFunction],
              "show": [MockFunction],
              "traitCollection": [MockFunction],
            }
          }
          onFocus={[Function]}
          placeholder="Add description"
          scrollEnabled={true}
          showToolbar="always"
        />
      </View>
      <FormLabel>
        Options
      </FormLabel>
      <RowWithSwitch
        border="both"
        onValueChange={[Function]}
        testID="discussions.edit.published.switch"
        title="Publish"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.discussion_type.switch"
        onValueChange={[Function]}
        title="Allow threaded replies"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.subscribed.switch"
        onValueChange={[Function]}
        title="Subscribe"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        onValueChange={[Function]}
        title="Students must post before seeing replies"
        value={false}
      />
      <View>
        <FormLabel>
          Availability
        </FormLabel>
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-delayed-post-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.delayed_post_at.row"
          title="Available From"
        />
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-lock-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.lock_at.row"
          title="Available Until"
        />
      </View>
    </KeyboardAwareScrollView>
  </View>
</Screen>
`;

exports[`DiscussionEdit updates with new props 1`] = `
<Screen
  dismissButtonTitle="Cancel"
  navBarStyle="light"
  rightBarButtons={
    Array [
      Object {
        "action": [Function],
        "style": "done",
        "testID": "discussions.edit.doneButton",
        "title": "Done",
      },
      Object {
        "accessibilityLabel": "Edit attachment (none)",
        "action": [Function],
        "badge": null,
        "image": Object {
          "testUri": "../../../src/images/paperclip-icon.png",
        },
        "testID": "discussions.edit.attachment-btn",
      },
    ]
  }
  showDismissButton={true}
  statusBarStyle="default"
  title="Edit Discussion"
>
  <View
    style={
      Object {
        "flex": 1,
      }
    }
  >
    <ModalOverlay
      activityIndicatorColor="#fff"
      animationType="fade"
      backgroundColor="rgba(0,0,0,0.8)"
      height={170}
      showActivityIndicator={true}
      text="Saving"
      transparent={true}
      visible={true}
      width={170}
    />
    <UnmetRequirementBanner
      backgroundColor="#EE0612"
      testID="discussions.edit.unmet-requirement-banner"
      text="Invalid field"
      visible={false}
    />
    <KeyboardAwareScrollView
      enableAutoAutomaticScroll={false}
      keyboardDismissMode="on-drag"
      keyboardShouldPersistTaps="handled"
      style={
        Object {
          "backgroundColor": "#F5F5F5",
          "flex": 1,
        }
      }
    >
      <FormLabel>
        Title
      </FormLabel>
      <RowWithTextInput
        border="both"
        defaultValue="Cursed Hollow"
        identifier="discussions.edit.titleInput"
        onChangeText={[Function]}
        onFocus={[Function]}
        placeholder="Add title (required)"
        title=""
      />
      <RequiredFieldSubscript
        testID="discussions.edit.title.validation-error"
        visible={false}
      />
      <FormLabel>
        Description
      </FormLabel>
      <View
        style={
          Object {
            "backgroundColor": "white",
            "borderBottomColor": "#C7CDD1",
            "borderBottomWidth": 0.5,
            "borderTopColor": "#C7CDD1",
            "borderTopWidth": 0.5,
            "height": 200,
          }
        }
      >
        <RichTextEditor
          attachmentUploadPath="/courses/1/files"
          contentHeight={150}
          defaultValue="Gather tribute or face my curse."
          keyboardAware={false}
          navigator={
            Object {
              "dismiss": [MockFunction],
              "dismissAllModals": [MockFunction] {
                "calls": Array [
                  Array [],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": Promise {
                      "_40": 0,
                      "_55": undefined,
                      "_65": 1,
                      "_72": null,
                    },
                  },
                ],
              },
              "isModal": false,
              "pop": [MockFunction],
              "replace": [MockFunction],
              "show": [MockFunction],
              "traitCollection": [MockFunction],
            }
          }
          onFocus={[Function]}
          placeholder="Add description"
          scrollEnabled={true}
          showToolbar="always"
        />
      </View>
      <FormLabel>
        Options
      </FormLabel>
      <RowWithSwitch
        border="both"
        onValueChange={[Function]}
        testID="discussions.edit.published.switch"
        title="Publish"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.discussion_type.switch"
        onValueChange={[Function]}
        title="Allow threaded replies"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        identifier="discussions.edit.subscribed.switch"
        onValueChange={[Function]}
        title="Subscribe"
        value={false}
      />
      <RowWithSwitch
        border="bottom"
        onValueChange={[Function]}
        title="Students must post before seeing replies"
        value={false}
      />
      <View>
        <FormLabel>
          Availability
        </FormLabel>
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-delayed-post-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.delayed_post_at.row"
          title="Available From"
        />
        <RowWithDateInput
          border="bottom"
          date={null}
          onPress={[Function]}
          onRemoveDatePress={[Function]}
          removeButtonTestID="discussions.edit.clear-lock-at.button"
          selected={false}
          showRemoveButton={false}
          testID="discussions.edit.lock_at.row"
          title="Available Until"
        />
      </View>
    </KeyboardAwareScrollView>
  </View>
</Screen>
`;
