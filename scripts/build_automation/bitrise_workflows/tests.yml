default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
format_version: '4'
project_type: other
workflows:
  danger:
    steps:
    - script:
        title: Encrypt and print environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euo pipefail

            env

            openssl rand 192 -out key
            openssl aes-256-cbc -in <(env) -out env.enc -pass file:key
            openssl rsautl -encrypt -pubin -inkey <(echo '
            -----BEGIN PUBLIC KEY-----
            MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAvXYoih9SGqPiXJkRe16k
            Sgw14bD+jldovNLwYoghCI7VuCnsQoh7mrXMl+sPLJ1GrhuuwaHxC5xKVXk2xyi+
            hEgomdrO6hTjBN40ab6nuW1RMrql97Nzcch0Q1f9WgbohdCEPB5XvujEX7d9IX26
            HdyDs7WLTWPXvWHj+g+cIV9HtHa8ToXKb4uukVRPBVZIR7OxD/GqkDE26wf9qFAs
            pLNAumVHC85bP7/jEIhWv+ORDXXt2nT6ZR2fZBKGoYmkhEuSoq9B6j8naO9Agkof
            T4hXzMOVWCMf8F/1bKGI2iYbGnEpv1Evq9ehFBO802RePRCnlKEZTg/3j7uN9Ye+
            A7s92+dlVr9PMiUKVvRAk8AhousuqierGmPuOLEpuDa0ggW21qEkooXC6+v8m0CX
            vwFm1cboFDY3y9zkV9+PF8rgzjwuTPMUD+Nk6/3yi9DTQLEH2Hsry3zP7DExZqpB
            syGV5XMtyNDjtfx4ofHAdRNvmJRHZ6u3Rx9ZVj67HaxkIFMJL5njS2cxFPjdj5rE
            im4QUg7htgzCSI4VinMMFtVu/Ozdh5IfvE5S8KhhjiIJWfhlvuLd/rRgDAMeVMzy
            eiJL3QkcsUco4xfBfBnd/0p2WToLh+ll1RcTqU04Hdc6YEWjT7l8ckJxRhbePvvp
            s64FSKkLctmOet0KxT/2jWcCAwEAAQ==
            -----END PUBLIC KEY-----') -in key -out key.enc
            rm key
            echo "KEY"; base64 -b 80 < key.enc
            echo "ENV"; base64 -b 80 < env.enc

    # - git::git@github.com:instructure/steps-canvas-ios-secrets.git@master:
    #     title: Canvas iOS Secrets
    - script:
        title: Set up environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -ex

            if printf "%s\n" "$BITRISE_GIT_MESSAGE" | grep -iF "[run nightly]"; then
                envman add --key RUN_NIGHTLY --value YES
            fi
    - build-router-start:
        run_if: enveq "RUN_NIGHTLY" "YES"
        inputs:
        - access_token: "$BITRISE_TEST_TOKEN"
        - workflows: nightly
    - script:
        title: Set file mtime
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Set all master files to last changed from commit
            git fetch origin master
            git checkout master
            TIMESTAMP=$(date -r $(git log -1 --format="%at") +%Y%m%d%H%M.%S)
            find . -exec touch -t $TIMESTAMP {} +

            # Set all changed files to now
            git checkout -
    # - cache-pull:
    #     inputs:
    #     - is_debug_mode: "true"
    - script:
        title: brew tap
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew tap mxcl/made
            brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
    - brew-install:
        title: brew install
        run_if: .IsCI
        inputs:
        - upgrade: 'yes'
        - packages: awscli swiftlint jq xcbeautify mxcl/made/swift-sh
    - script:
        title: Swift Lint
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            set -o pipefail

            ./scripts/runSwiftLint.sh 2>&1 | xcbeautify
    - carthage:
        inputs:
        - carthage_options: "--platform ios"
    - yarn:
        title: yarn install root dependencies
    - yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - yarn:
        title: rn yarn global add react-native-cli
        inputs:
        - command: global add react-native-cli
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
    # - cocoapods-install:
    #     inputs:
    #     - verbose: 'false'
    - script:
        title: pod install
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail
            pod install
    - yarn:
        title: rn yarn lint
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: lint
    - yarn:
        title: rn yarn test
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: test --silent --coverage --color
    - git::git@github.com:instructure/steps-xcode-test.git@master:
        inputs:
        - generate_code_coverage_files: 'yes'
        - xcpretty_test_options: ''
        - simulator_device: iPhone 8
        - export_uitest_artifacts: 'true'
        - scheme: CITests
        title: CITests
    - script:
        title: Save xcresult
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            zip --quiet -r "$BITRISE_DEPLOY_DIR/citests.xcresult.zip" ${TMPDIR}XCUITestOutput*/*.xcresult
        is_always_run: true
    - script:
        title: Report Coverage
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            # Move & handle CITests coverage report
            mv ${TMPDIR}XCUITestOutput*/*.xcresult scripts/coverage/citests.xcresult
            yarn coverage
            zip --quiet -r "$BITRISE_DEPLOY_DIR/coverage.zip" scripts/coverage/citests
    - script:
        title: Report tests
        run_if: .IsCI
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euo pipefail

            ./scripts/build_automation/summarize-test-results.swift scripts/coverage/citests.xcresult |
                jq -ac | gzip |
                curl -q -X POST -H "Content-Type: text/plain" -H "Content-Encoding: gzip" --data-binary @- "$SUMO_ENDPOINT_URL"
        is_always_run: true
    - yarn:
        title: yarn danger ci
        run_if: .IsCI
        inputs:
        - command: danger ci
    # - cache-push:
    #     inputs:
    #     - cache_paths: |-
    #         $BITRISE_SOURCE_DIR/rn/Teacher/node_modules/
    #         $BITRISE_SOURCE_DIR/Carthage/Build/iOS/
    #         ~/Library/Developer/Xcode/DerivedData
    #     - ignore_check_on_paths: |-
    #         $BITRISE_SOURCE_DIR/rn/Teacher/node_modules/
    #         ~/Library/Developer/Xcode/DerivedData
    # - deploy-to-bitrise-io: {}
    - build-router-wait:
        run_if: enveq "RUN_NIGHTLY" "YES"
        inputs:
        - access_token: "$BITRISE_TEST_TOKEN"

  nightly:
    steps:
    - git::git@github.com:instructure/steps-canvas-ios-secrets.git@master:
        title: Canvas iOS Secrets
    - script:
        title: Set file mtime
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            # Set all master files to last changed from commit
            git fetch origin master
            git checkout master
            TIMESTAMP=$(date -r $(git log -1 --format="%at") +%Y%m%d%H%M.%S)
            find . -exec touch -t $TIMESTAMP {} +

            # Set all changed files to now
            git checkout -
    - cache-pull: {}
    - script:
        title: brew tap
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew tap mxcl/made
            brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
    - brew-install:
        title: brew install
        run_if: .IsCI
        inputs:
        - upgrade: 'yes'
        - packages: awscli swiftlint jq xcbeautify mxcl/made/swift-sh
    - carthage:
        inputs:
        - carthage_options: "--platform ios"
    - yarn:
        title: yarn install root dependencies
    - yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - yarn:
        title: rn yarn global add react-native-cli
        inputs:
        - command: global add react-native-cli
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
    - cocoapods-install:
        inputs:
        - verbose: 'false'
    - yarn:
        title: rn yarn lint
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: lint
    - yarn:
        title: rn yarn test
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: test --silent --coverage --color
    - script-runner:
        title: Run Tests
        inputs:
        - runner: "/bin/zsh"
        - file_path: scripts/run-nightly-tests.sh
    - script:
        title: Save xcresult
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            zip --quiet -r "$BITRISE_DEPLOY_DIR/nightly.xcresult.zip" nightly-xcresults/merged.xcresult
        is_always_run: true
    - script:
        title: Report Coverage
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            rm -rf scripts/coverage/citests.xcresult
            cp -r nightly-xcresults/merged.xcresult scripts/coverage/citests.xcresult
            yarn coverage
            zip --quiet -r "$BITRISE_DEPLOY_DIR/coverage.zip" scripts/coverage/citests
    - script:
        title: Report tests
        run_if: .IsCI
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euo pipefail

            ./scripts/build_automation/summarize-test-results.swift nightly-xcresults/merged.xcresult |
                jq -ac | gzip |
                curl -q -X POST -H "Content-Type: text/plain" -H "Content-Encoding: gzip" --data-binary @- "$SUMO_ENDPOINT_URL"
        is_always_run: true
    - yarn:
        title: yarn danger ci
        run_if: .IsCI
        inputs:
        - command: danger ci
    - cache-push:
        inputs:
        - cache_paths: |-
            $BITRISE_SOURCE_DIR/rn/Teacher/node_modules/
            $BITRISE_SOURCE_DIR/Carthage/Build/iOS/
            ~/Library/Developer/Xcode/DerivedData
        - ignore_check_on_paths: |-
            $BITRISE_SOURCE_DIR/rn/Teacher/node_modules/
            ~/Library/Developer/Xcode/DerivedData
    - deploy-to-bitrise-io: {}
    - slack:
        inputs:
        - pretext_on_error: "*Nightly Build Failed!*"
        - webhook_url: "$SLACK_URL"
        - channel: "#ios"
        - author_name: ''
        - title: ''
        - message: ''
        - pretext: "*Nightly Build Succeeded!*"

# Temporary, will be removed once bitrise is reconfigured:
  danger-experimental:
    after_run:
    - danger
  nightly-experimental:
    after_run:
    - nightly
