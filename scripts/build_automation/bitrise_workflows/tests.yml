---
app:
  envs:
  - HOMEBREW_NO_INSTALL_CLEANUP: 1
    opts:
      is_expand: false
  - BITRISE_PROJECT_PATH: "./Canvas.xcworkspace"
    opts:
      is_expand: false
  - BITRISE_SCHEME: NightlyTests
    opts:
      is_expand: false
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
format_version: '4'
project_type: other
workflows:
  danger:
    steps:
    - script:
        title: Set up environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -ex

            if printf "%s\n" "$BITRISE_GIT_MESSAGE" | grep -iF "[run nightly]"; then
                envman add --key RUN_NIGHTLY --value YES
            fi
    - build-router-start:
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - workflows: danger-yarn
    - set-env-var:
        inputs:
        - destination_keys: DANGER_YARN_SLUG
        - value: "$ROUTER_STARTED_BUILD_SLUGS"

    - build-router-start:
        run_if: enveq "RUN_NIGHTLY" "YES"
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - workflows: nightly
    - set-env-var:
        run_if: enveq "RUN_NIGHTLY" "YES"
        inputs:
        - destination_keys: NIGHTLY_SLUG
        - value: "$ROUTER_STARTED_BUILD_SLUGS"

    - cache-pull: {}
    - script-runner:
        run_if: .IsCI
        title: Set file mtime
        inputs:
        - runner: "/bin/zsh"
        - file_path: scripts/build_automation/set-mtime.sh
    - script:
        title: Set TimeZone to MST
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex
            sudo systemsetup -settimezone America/Denver
    - script:
        title: brew tap
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew tap mxcl/made
            brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
    - brew-install:
        title: brew install
        run_if: .IsCI
        inputs:
        - upgrade: 'yes'
        - packages: awscli swiftlint jq xcbeautify mxcl/made/swift-sh
    - carthage:
        inputs:
        - carthage_options: "--platform ios"
    - yarn:
        title: yarn install root dependencies
    - yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - yarn:
        title: rn yarn global add react-native-cli
        inputs:
        - command: global add react-native-cli
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
    - cocoapods-install:
        inputs:
        - verbose: 'false'
    - script:
        title: Build CITests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            export NSUnbufferedIO=YES
            export CODE_SIGNING_REQUIRED=NO
            export IgnoreFileSystemDeviceInodeChanges=1

            xcodebuild \
                -workspace Canvas.xcworkspace \
                -scheme CITests \
                -sdk iphonesimulator \
                -configuration Debug \
                build-for-testing |
                tee $BITRISE_DEPLOY_DIR/raw-xcodebuild.log |
                xcbeautify
    - script:
        title: Run CITests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            export NSUnbufferedIO=YES

            xcodebuild \
                -workspace Canvas.xcworkspace \
                -scheme CITests \
                -destination 'platform=iOS Simulator,name=iPhone 8' \
                -resultBundlePath scripts/coverage/citests.xcresult \
                test-without-building 2>&1 | xcbeautify
    - script:
        title: Save xcresult
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            zip --quiet -r "$BITRISE_DEPLOY_DIR/citests.xcresult.zip" scripts/coverage/citests.xcresult
        is_always_run: true
    - build-router-wait:
        title: Wait for danger-yarn sub-build to succeed
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - buildslugs: "$DANGER_YARN_SLUG"
    - script:
        title: Get danger-yarn results
        is_always_run: true
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            ARTIFACT_SLUG=$(curl -H "Authorization: $BITRISE_CI_TOKEN" \
                "https://api.bitrise.io/v0.1/apps/${BITRISE_APP_SLUG}/builds/${DANGER_YARN_SLUG}/artifacts" |
                jq -r '.data[] | select(.title == "results.tar.xz").slug')
            ARTIFACT_URL=$(curl -H "Authorization: $BITRISE_CI_TOKEN" \
                "https://api.bitrise.io/v0.1/apps/${BITRISE_APP_SLUG}/builds/${DANGER_YARN_SLUG}/artifacts/${ARTIFACT_SLUG}" |
                jq -r '.data.expiring_download_url')
            curl -L $ARTIFACT_URL | tar xJf -
            cat tmp/report_to_danger_subbuild.md >> tmp/report_to_danger.md || true
    - script:
        title: Report Coverage
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            # Move & handle CITests coverage report
            yarn coverage
            zip --quiet -r "$BITRISE_DEPLOY_DIR/coverage.zip" scripts/coverage/citests
    - script:
        title: Report tests
        run_if: .IsCI
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euo pipefail

            ./scripts/build_automation/summarize-test-results.swift scripts/coverage/citests.xcresult \
                > /dev/null
                # until splunk is configured...
                # jq -ac . | gzip |
                # curl -q -X POST -H "Content-Type: text/plain" -H "Content-Encoding: gzip" --data-binary @- "$SUMO_ENDPOINT_URL"
        is_always_run: true
    - yarn:
        title: yarn danger ci
        run_if: .IsCI
        is_always_run: true
        inputs:
        - command: danger ci
    - deploy-to-bitrise-io: {}
    - build-router-wait:
        run_if: enveq "RUN_NIGHTLY" "YES"
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - buildslugs: "$NIGHTLY_SLUG"

  nightly:
    steps:
    - slack:
        title: "Send build start message to slack"
        inputs:
        - webhook_url: $SLACK_URL
        - channel: '#ios-bots'
        - pretext: ""
        - author_name: ""
        - message: ""
        - title: 'Nightly build started... ${BITRISE_BUILD_URL}'
        - fields: ""
        - color: warning
        - footer: ""
        - buttons: ""
        - timestamp: "no"
    - git::git@github.com:instructure/steps-canvas-ios-secrets.git@master:
        title: Canvas iOS Secrets
    - cache-pull: {}
    - script-runner:
        run_if: .IsCI
        title: Set file mtime
        inputs:
        - runner: "/bin/zsh"
        - file_path: scripts/build_automation/set-mtime.sh
    - script:
        title: Homebrew
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew tap mxcl/made
            brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
            brew install awscli swiftlint jq xcbeautify mxcl/made/swift-sh
            brew install Caskroom/cask/soundflower
    - carthage:
        inputs:
        - carthage_options: "--platform ios"
    - yarn:
        title: yarn install root dependencies
    - yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - yarn:
        title: rn yarn global add react-native-cli
        inputs:
        - command: global add react-native-cli
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
    - cocoapods-install:
        inputs:
        - verbose: 'false'
    - yarn:
        title: rn yarn lint
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: lint
    - yarn:
        title: rn yarn test
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: test --silent --coverage --color
    - script-runner:
        title: Run Tests
        inputs:
        - runner: "/bin/zsh"
        - file_path: scripts/run-nightly-tests.sh
    - script:
        title: Save xcresult
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            zip --quiet -r "$BITRISE_DEPLOY_DIR/nightly.xcresult.zip" nightly-xcresults/merged.xcresult
        is_always_run: true
    - script:
        title: Report Coverage
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            rm -rf scripts/coverage/citests.xcresult
            cp -r nightly-xcresults/merged.xcresult scripts/coverage/citests.xcresult
            yarn coverage
            zip --quiet -r "$BITRISE_DEPLOY_DIR/coverage.zip" scripts/coverage/citests
    - script:
        title: Report tests
        run_if: .IsCI
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euo pipefail

            ./scripts/build_automation/summarize-test-results.swift nightly-xcresults/merged.xcresult |
                jq -ac | gzip |
                curl -q -X POST -H "Content-Type: text/plain" -H "Content-Encoding: gzip" --data-binary @- "$SUMO_ENDPOINT_URL"
        is_always_run: true
    - deploy-to-bitrise-io: {}
    - slack:
        inputs:
        - pretext_on_error: "*Nightly Build Failed!*"
        - webhook_url: "$SLACK_URL"
        - channel: "#ios-bots"
        - author_name: ''
        - title: ''
        - message: ''
        - pretext: "*Nightly Build Succeeded!*"
  nightly-cache-gen:
    steps:
    - cache-pull: {}
    - script:
        title: brew tap
        inputs:
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew tap mxcl/made
            brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
    - brew-install:
        title: brew install
        inputs:
        - upgrade: 'yes'
        - packages: awscli swiftlint jq xcbeautify mxcl/made/swift-sh
    - carthage:
        inputs:
        - carthage_options: "--platform ios"
    - yarn:
        title: yarn install root dependencies
    - yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - yarn:
        title: rn yarn global add react-native-cli
        inputs:
        - command: global add react-native-cli
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
    - cocoapods-install:
        inputs:
        - verbose: 'false'
    - script:
        title: Build
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            export NSUnbufferedIO=YES
            export CODE_SIGNING_REQUIRED=NO
            export IgnoreFileSystemDeviceInodeChanges=1

            xcodebuild \
                -workspace Canvas.xcworkspace \
                -scheme CITests \
                -sdk iphonesimulator \
                -configuration Debug \
                build-for-testing |
                tee $BITRISE_DEPLOY_DIR/raw-xcodebuild.log |
                xcpretty --color
    - script:
        title: Prepare cache
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            mkdir -p cache-metadata
            echo $GIT_CLONE_COMMIT_HASH > cache-metadata/cache-commit-hash
            # always cache
            uuidgen > cache-metadata/cache-fingerprint
    - cache-push:
        inputs:
        - compress_archive: true
        - cache_paths: |-
            cache-metadata/ -> cache-metadata/cache-fingerprint
            rn/Teacher/node_modules/ -> cache-metadata/cache-fingerprint
            Carthage/ -> cache-metadata/cache-fingerprint
            ~/Library/Developer/Xcode/DerivedData -> cache-metadata/cache-fingerprint
            /usr/local/Homebrew -> cache-metadata/cache-fingerprint
  danger-yarn:
    steps:
    - cache-pull: {}
    - script-runner:
        run_if: .IsCI
        title: Set file mtime
        inputs:
        - runner: "/bin/zsh"
        - file_path: scripts/build_automation/set-mtime.sh
    - script:
        title: brew tap
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew tap mxcl/made
            brew tap thii/xcbeautify https://github.com/thii/xcbeautify.git
    - brew-install:
        title: brew install
        run_if: .IsCI
        inputs:
        - upgrade: 'yes'
        - packages: awscli swiftlint jq xcbeautify mxcl/made/swift-sh
    - script:
        title: Swift Lint
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -eo pipefail

            mkdir -p tmp
            ./scripts/runSwiftLint.sh 2>&1 | xcbeautify | tee tmp/swift-lint-results.txt
    - yarn:
        title: yarn install root dependencies
    - yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - yarn:
        title: rn yarn global add react-native-cli
        inputs:
        - command: global add react-native-cli
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
    - yarn:
        title: rn yarn lint
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: lint:ci
    - yarn:
        title: rn yarn test
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: test:ci
    - script:
        title: Save results
        is_always_run: true
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            function markdown_code {
                printf '\n\n'
                sed -e $'s/\x1b\\[[0-9;]*[a-zA-Z]//g' \
                    -e 's/^/    /'
            }

            function report_file {
                local name=$1
                local file=$2
                if [[ -f $file && -s $file ]]; then
                    echo "<details><summary>:x: $name</summary>"
                    markdown_code < $file
                    echo "</details>"
                fi >> tmp/report_to_danger_subbuild.md
            }

            report_file "Swift lint" tmp/swift-lint-results.txt
            report_file "Yarn lint" tmp/yarn-lint-results.txt
            sed -n '/Summary of all failing tests/,$ p' < tmp/yarn-test-results.txt > tmp/yarn-test-failures.txt || true
            report_file "JS tests" tmp/yarn-test-failures.txt

            mkdir -p scripts/coverage/react-native

            tar -cJf $BITRISE_DEPLOY_DIR/results.tar.xz \
                scripts/coverage/react-native \
                tmp/report_to_danger_subbuild.md
    - deploy-to-bitrise-io: {}
