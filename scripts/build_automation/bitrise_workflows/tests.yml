---
app:
  envs:
  - HOMEBREW_NO_INSTALL_CLEANUP: 1
  - BITRISE_PROJECT_PATH: "./Canvas.xcworkspace"
  - BITRISE_SCHEME: NightlyTests
  - SPLUNK_ENDPOINT_URL: https://http-inputs-inst.splunkcloud.com:443/services/collector
  - RCT_NO_LAUNCH_PACKAGER: 1
  - FORCE_BUNDLING: 1
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
format_version: 4
project_type: other
workflows:

  danger:
    steps:
    - &set-time-zone
      script:
        title: Set time zone
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -exo pipefail

            sudo systemsetup -settimezone America/Denver
    - script:
        title: Set up environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -exo pipefail

            if printf "%s\n" "$BITRISE_GIT_MESSAGE" | grep -iE "\[run.nightly\]" && [[ $BITRISE_GIT_BRANCH != master ]]; then
                envman add --key RUN_NIGHTLY --value YES
            fi
    - build-router-start:
        title: Start nightly if requested
        run_if: enveq "RUN_NIGHTLY" "YES"
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - workflows: nightly
    - build-router-start:
        title: Start sub-build
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - workflows: danger-yarn

    - cache-pull: {}
    - &set-mtime
      script-runner:
        title: Set file mtime
        inputs:
        - runner: "/bin/zsh"
        - file_path: scripts/build_automation/set-mtime.sh
    - &install-tools
      script:
        title: Install build tools
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            brew reinstall swiftlint jq

            rm -rf "$BITRISE_SOURCE_DIR/Pods/Target Support Files/yoga"
    - &yarn-install-root
      yarn:
        title: yarn install root dependencies
    - &yarn-install
      yarn:
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        title: rn yarn install
    - &cocoapods
      cocoapods-install:
        inputs:
        - verbose: 'false'
    - &build-citests
      script:
        title: Build CITests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            export NSUnbufferedIO=YES
            export CODE_SIGNING_REQUIRED=NO
            export IgnoreFileSystemDeviceInodeChanges=1

            xcodebuild \
                -workspace Canvas.xcworkspace \
                -scheme CITests \
                -sdk iphonesimulator \
                -configuration Debug \
                -destination 'platform=iOS Simulator,name=iPhone SE (3rd generation),OS=latest' \
                COMPILER_INDEX_STORE_ENABLE=NO \
                build-for-testing |
                tee $BITRISE_DEPLOY_DIR/raw-xcodebuild.log |
                xcbeautify --quiet
    - script:
        title: Run CITests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            export NSUnbufferedIO=YES

            xcodebuild \
                -workspace Canvas.xcworkspace \
                -scheme CITests \
                -destination 'platform=iOS Simulator,name=iPhone SE (3rd generation)' \
                -resultBundlePath scripts/coverage/citests.xcresult \
                test-without-building 2>&1 | xcbeautify
    - script:
        title: Save xcresult
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            tar -cJf "$BITRISE_DEPLOY_DIR/citests.xcresult.tar.xz" scripts/coverage/citests.xcresult
        is_always_run: true
    - build-router-wait:
        title: Wait for danger-yarn sub-build to succeed
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
    - script:
        title: Get danger-yarn results
        is_always_run: true
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            API="https://api.bitrise.io/v0.1/apps/${BITRISE_APP_SLUG}/builds/${ROUTER_STARTED_BUILD_SLUGS}"

            ARTIFACT_SLUG=$(curl -H "Authorization: $BITRISE_CI_TOKEN" "$API/artifacts" |
                jq -r '.data[] | select(.title == "results.tar.xz").slug')
            ARTIFACT_URL=$(curl -H "Authorization: $BITRISE_CI_TOKEN" "$API/artifacts/${ARTIFACT_SLUG}" |
                jq -r '.data.expiring_download_url')
            curl -L $ARTIFACT_URL | tar -xJf -
            cat tmp/report_to_danger_subbuild.md >> tmp/report_to_danger.md || true
    - script:
        title: Report Coverage
        deps:
            brew:
            - name: awscli
              bin_name: aws
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            # Move & handle CITests coverage report
            yarn coverage
            zip --quiet -r "$BITRISE_DEPLOY_DIR/coverage.zip" scripts/coverage/citests
    - script:
        title: Report tests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -xeuo pipefail

            ./scripts/run-swift summarize-test-results scripts/coverage/citests.xcresult | jq -ac '{"sourcetype": "mobile-ios-testresult", "event": .}' > scripts/coverage/jqresults.json

            curl -q -X POST \
                -H "Authorization: $SPLUNK_SECRET" \
                -H "Content-Type: application/json" \
                --data-binary @"scripts/coverage/jqresults.json" \
                "$SPLUNK_ENDPOINT_URL"

            tar -cJf "$BITRISE_DEPLOY_DIR/jqresults.json.tar.xz" scripts/coverage/jqresults.json
        is_always_run: true
    - yarn:
        title: yarn danger ci
        is_always_run: true
        inputs:
        - command: danger ci
    - script:
        title: Clean up checkmarx spam
        is_always_run: true
        is_skippable: true
        inputs:
          - content: |-
              set -euo pipefail
              ./scripts/run-swift delete-cx $BITRISE_PULL_REQUEST
    - deploy-to-bitrise-io: {}

  danger-yarn:
    steps:
    - cache-pull: {}
    - *set-mtime
    - *install-tools
    - script:
        title: Swift Lint
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -eo pipefail

            mkdir -p tmp
            if ! ./scripts/runSwiftLint.sh > tmp/swift-lint-results-raw.txt 2>&1; then
                xcbeautify < tmp/swift-lint-results-raw.txt > tmp/swift-lint-results.txt
                ./scripts/run-swift suggest-lint-fix $BITRISE_PULL_REQUEST
                exit 1
            fi
    - *yarn-install-root
    - *yarn-install
    - &yarn-lint
      yarn:
        title: rn yarn lint
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: lint:ci
    - &yarn-test
      yarn:
        title: rn yarn test
        inputs:
        - workdir: "$BITRISE_SOURCE_DIR/rn/Teacher"
        - command: test:ci
    - script:
        title: Save results
        is_always_run: true
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            function markdown_code {
                printf '\n\n'
                sed -e $'s/\x1b\\[[0-9;]*[a-zA-Z]//g' \
                    -e 's/^/    /'
            }

            function report_file {
                local name=$1
                local file=$2
                if [[ -f $file && -s $file ]]; then
                    echo "<details><summary>:x: $name</summary>"
                    markdown_code < $file
                    echo "</details>"
                fi >> tmp/report_to_danger_subbuild.md
            }

            report_file "Swift lint" tmp/swift-lint-results.txt
            report_file "Yarn lint" tmp/yarn-lint-results.txt
            sed -n '/Summary of all failing tests/,$ p' < tmp/yarn-test-results.txt > tmp/yarn-test-failures.txt || true
            report_file "JS tests" tmp/yarn-test-failures.txt

            mkdir -p scripts/coverage/react-native

            tar -cJf $BITRISE_DEPLOY_DIR/results.tar.xz \
                scripts/coverage/react-native \
                tmp/report_to_danger_subbuild.md
    - deploy-to-bitrise-io: {}

  nightly-cache-gen:
    steps:
    - *install-tools
    - *yarn-install-root
    - *yarn-install
    - *cocoapods
    - *build-citests
    - script:
        title: Build UI test schemes
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            ./scripts/run-swift run-ui-tests --build

            ./scripts/run-swift run-ui-tests --build \
                --scheme IPadTests \
                --device-name 'iPad Air (5th generation)'
    - script:
        title: Prepare cache
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            mkdir -p cache-metadata
            echo $GIT_CLONE_COMMIT_HASH > cache-metadata/cache-commit-hash
            # always cache
            uuidgen > cache-metadata/cache-fingerprint
    - cache-push:
        inputs:
        - compress_archive: true
        - cache_paths: |-
            cache-metadata/ -> cache-metadata/cache-fingerprint
            rn/Teacher/node_modules/ -> cache-metadata/cache-fingerprint
            ~/Library/Developer/Xcode/DerivedData -> cache-metadata/cache-fingerprint
            /usr/local/Homebrew -> cache-metadata/cache-fingerprint

  nightly:
    steps:
    - build-router-start:
        title: Start nightly group B
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - workflows: nightly-b
        - environment_key_list: |-
            SLACK_URL
        outputs:
          - ROUTER_STARTED_BUILD_SLUGS: NIGHTLY_B_ROUTER_SLUG
    after_run:
    - nightly-a
    - nightly-merge-coverage

  nightly-a:
    steps:
    - script:
        title: Set up environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -exo pipefail
            envman add --key NIGHTLY_GROUP --value A
    after_run:
    - nightly-runner

  nightly-b:
    steps:
    - script:
        title: Set up environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -exo pipefail
            envman add --key NIGHTLY_GROUP --value B
    after_run:
    - nightly-runner

  nightly-runner:
    steps:
    - script:
        title: Set up environment variables
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -exo pipefail

            if [[ -z $NIGHTLY_GROUP ]]; then
                echo "NIGHTLY_GROUP must be set"
                exit 1
            fi

            sudo systemsetup -settimezone America/Denver
            case $BITRISE_GIT_BRANCH in
                release/student|release/teacher|release/parent|master)
                    envman add --key NOTIFY_SLACK --value YES
                ;;
            esac
    - slack:
        title: Send build start message to slack
        run_if: enveq "NOTIFY_SLACK" "YES"
        inputs:
        - webhook_url: $SLACK_URL
        - channel: '#ios-bots'
        - pretext: ""
        - author_name: ""
        - message: ""
        - title: 'Nightly (Group ${NIGHTLY_GROUP}) build started... ${BITRISE_BUILD_URL}'
        - fields: ""
        - color: warning
        - footer: ""
        - buttons: ""
        - timestamp: "no"
    - github-status:
        inputs:
        - auth_token: $DANGER_GITHUB_API_TOKEN
        - status_identifier: ci/bitrise/${BITRISE_APP_SLUG}/nightly-${NIGHTLY_GROUP}
        - commit_hash: $GIT_CLONE_COMMIT_HASH
        - set_specific_status: pending
        - description: "In progress - Nightly Tests (Group ${NIGHTLY_GROUP})"
    - &secrets
      git::git@github.com:instructure/steps-canvas-ios-secrets.git@master:
        title: Canvas iOS Secrets
    - cache-pull: {}
    - *set-mtime
    - *install-tools
    - *yarn-install-root
    - *yarn-install
    - *yarn-lint
    - *cocoapods
    - script:
        title: Run Nightly Tests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            set -euo pipefail

            all_targets=($(jq -r < TestPlans/NightlyTests.xctestplan '.testTargets[].target.name'))
            group_B_targets=(StudentUITests StudentE2ETests)
            group_A_targets=(${all_targets:|group_B_targets})

            if [[ $NIGHTLY_GROUP = A ]]; then
                (cd rn/Teacher; yarn test:ci)

                ret=0

                ./scripts/run-swift run-ui-tests --build \
                    --scheme IPadTests \
                    --device-name 'iPad (9th generation)' \
                    --all-tests || ret=$?
                ./scripts/run-swift run-ui-tests --build --append-results $group_A_targets || ret=$?

                exit $ret
            elif [[ $NIGHTLY_GROUP = B ]]; then
                ./scripts/run-swift run-ui-tests --build $group_B_targets
            else
                echo "unknown nightly group '$NIGHTLY_GROUP'"
                exit 1
            fi
    - &save-xcresult
      script:
        title: Save xcresult
        inputs:
        - runner_bin: "/bin/zsh"
        - working_dir: "$BITRISE_SOURCE_DIR/ui-test-results"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            tar -cJf "$BITRISE_DEPLOY_DIR/tests.xcresult.tar.xz" merged.xcresult
        is_always_run: true
    - deploy-to-bitrise-io: {}
    - github-status:
        inputs:
        - auth_token: $DANGER_GITHUB_API_TOKEN
        - status_identifier: ci/bitrise/${BITRISE_APP_SLUG}/nightly-${NIGHTLY_GROUP}
        - commit_hash: $GIT_CLONE_COMMIT_HASH
        - description: "Nightly Tests (Group ${NIGHTLY_GROUP})"
    - slack:
        title: Send build result message to slack
        run_if: enveq "NOTIFY_SLACK" "YES"
        inputs:
        - webhook_url: "$SLACK_URL"
        - channel: "#ios-bots"
        - author_name: ''
        - title: ''
        - pretext: "*Nightly Build (Group ${NIGHTLY_GROUP}) Succeeded!*"
        - message: ''
        - pretext_on_error: "*Nightly (Group ${NIGHTLY_GROUP}) Failed!*"
        - message_on_error: |-
            Failed tests:
            $FINAL_FAILED_TESTS

  nightly-merge-coverage:
    steps:
    - build-router-wait:
        title: Wait for nightly group B sub-build to succeed
        run_if: .IsCI
        inputs:
        - access_token: "$BITRISE_CI_TOKEN"
        - buildslugs: "${NIGHTLY_B_ROUTER_SLUG}"
        - abort_on_fail: 'no'
    - script:
        title: Get B results
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -euxo pipefail

            mv ui-test-results/merged.xcresult ui-test-results/merged-a.xcresult

            API="https://api.bitrise.io/v0.1/apps/${BITRISE_APP_SLUG}/builds/${NIGHTLY_B_ROUTER_SLUG}"

            ARTIFACT_SLUG=$(curl -H "Authorization: $BITRISE_CI_TOKEN" "$API/artifacts" |
                jq -r '.data[] | select(.title == "tests.xcresult.tar.xz").slug')
            ARTIFACT_URL=$(curl -H "Authorization: $BITRISE_CI_TOKEN" "$API/artifacts/${ARTIFACT_SLUG}" |
                jq -r '.data.expiring_download_url')
            curl -L $ARTIFACT_URL | tar -xJf -

            mv merged.xcresult ui-test-results/merged-b.xcresult
            xcrun xcresulttool merge ui-test-results/merged-{a,b}.xcresult --output-path ui-test-results/merged.xcresult
        is_always_run: true
    - script:
        title: Report Coverage
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            rm -rf scripts/coverage/citests.xcresult
            mv ui-test-results/merged.xcresult scripts/coverage/nightlytests.xcresult
            yarn coverage --scheme NightlyTests
        is_always_run: true
    - script:
        title: Report tests
        inputs:
        - runner_bin: "/bin/zsh"
        - content: |-
            #!/bin/zsh
            set -xeuo pipefail

            ./scripts/run-swift summarize-test-results scripts/coverage/nightlytests.xcresult | jq -ac '{"sourcetype": "mobile-ios-testresult", "event": .}' > scripts/coverage/jqresults.json

            curl -q -X POST \
                -H "Authorization: $SPLUNK_SECRET" \
                -H "Content-Type: application/json" \
                --data-binary @"scripts/coverage/jqresults.json" \
                "$SPLUNK_ENDPOINT_URL"

            tar -cJf "$BITRISE_DEPLOY_DIR/jqresults.json.tar.xz" scripts/coverage/jqresults.json
        is_always_run: true
    - deploy-to-bitrise-io: {}
  beta-tests:
    steps:
    - *set-time-zone
    - *secrets
    - cache-pull: {}
    - *set-mtime
    - *install-tools
    - *yarn-install-root
    - *yarn-install
    - *cocoapods
    - script:
        title: beta tests
        inputs:
        - content: |-
            set -euo pipefail
            ./scripts/run-swift run-ui-tests --build --scheme 'Beta E2E' --all-tests
    - *save-xcresult
    - deploy-to-bitrise-io: {}
    - slack:
        title: Send build result message to slack
        run_if: enveq "BITRISE_GIT_BRANCH" "master"
        inputs:
        - webhook_url: "$SLACK_URL"
        - channel: "#ios-bots"
        - author_name: ''
        - title: ''
        - pretext: "*Beta Tests Succeeded!*"
        - message: ''
        - pretext_on_error: "*Beta Tests Failed!*"
        - message_on_error: |-
            Failed tests:
            $FINAL_FAILED_TESTS
