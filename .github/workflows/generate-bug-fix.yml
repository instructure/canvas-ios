name: Generate Bug Fix and Create PR

on:
  workflow_dispatch:
    inputs:
      issue_key:
        description: 'Jira issue key (e.g., CLX-1234)'
        required: true
        type: string
      skip_tests:
        description: 'Skip running tests (build only)'
        required: false
        type: boolean
        default: false

jobs:
  generate-bug-fix:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Fetch Jira Issue
        id: jira-fetch
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          ISSUE_KEY="${{ inputs.issue_key }}"
          echo "Fetching Jira issue: $ISSUE_KEY"

          AUTH_STRING="${JIRA_EMAIL}:${JIRA_API_TOKEN}"
          AUTH_HEADER="Authorization: Basic $(printf '%s' "$AUTH_STRING" | base64 -w 0)"

          # Fetch issue details
          RESPONSE=$(curl -s -w "\n%{http_code}" -X GET \
            -H "$AUTH_HEADER" \
            -H "Content-Type: application/json" \
            "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Error: Failed to fetch Jira issue. HTTP $HTTP_CODE"
            exit 1
          fi

          echo "jira_response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Fetch comments
          COMMENTS_RESPONSE=$(curl -s -X GET \
            -H "$AUTH_HEADER" \
            -H "Content-Type: application/json" \
            "$JIRA_BASE_URL/rest/api/3/issue/$ISSUE_KEY/comment")

          echo "jira_comments<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMENTS_RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "issue_key=$ISSUE_KEY" >> $GITHUB_OUTPUT

      - name: Extract Bug Information
        id: extract-info
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          JIRA_RESPONSE: ${{ steps.jira-fetch.outputs.jira_response }}
        run: |
          node .github/scripts/generate-bug-fix/extract-bug-info.js

      - name: Read Affected Files
        id: read-files
        env:
          AFFECTED_FILES: ${{ steps.extract-info.outputs.affected_files }}
        run: |
          node .github/scripts/generate-bug-fix/read-affected-files.js

      - name: Generate Fix with Claude
        id: generate-fix
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          JIRA_RESPONSE: ${{ steps.jira-fetch.outputs.jira_response }}
          JIRA_COMMENTS: ${{ steps.jira-fetch.outputs.jira_comments }}
          FILE_CONTENTS: ${{ steps.read-files.outputs.file_contents }}
        run: |
          node .github/scripts/generate-bug-fix/generate-fix.js

      - name: Generate or Update Tests
        id: generate-tests
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          FIX_CODE: ${{ steps.generate-fix.outputs.fix_code }}
          AFFECTED_FILES: ${{ steps.extract-info.outputs.affected_files }}
        run: |
          node .github/scripts/generate-bug-fix/generate-tests.js

      - name: Create fix branch
        run: |
          ISSUE_KEY="${{ steps.jira-fetch.outputs.issue_key }}"
          BRANCH_NAME="auto-fix/${ISSUE_KEY}"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if branch exists locally or remotely
          if git show-ref --verify --quiet "refs/heads/$BRANCH_NAME"; then
            echo "‚ö†Ô∏è Branch $BRANCH_NAME already exists locally"
            git checkout "$BRANCH_NAME"
            git reset --hard origin/master
            echo "‚úì Reset branch to match master"
          elif git ls-remote --exit-code --heads origin "$BRANCH_NAME" >/dev/null 2>&1; then
            echo "‚ö†Ô∏è Branch $BRANCH_NAME already exists on remote"
            git fetch origin "$BRANCH_NAME"
            git checkout -b "$BRANCH_NAME" "origin/$BRANCH_NAME"
            git reset --hard origin/master
            echo "‚úì Reset remote branch to match master"
          else
            echo "Creating new branch $BRANCH_NAME"
            git checkout -b "$BRANCH_NAME"
          fi

      - name: Apply Fix
        env:
          FIX_CODE: ${{ steps.generate-fix.outputs.fix_code }}
          AFFECTED_FILES: ${{ steps.extract-info.outputs.affected_files }}
        run: |
          echo "Applying fix to files..."
          node .github/scripts/generate-bug-fix/apply-fix.js
          echo "Files after fix:"
          git status -s

      - name: Apply Tests
        env:
          TEST_CODE: ${{ steps.generate-tests.outputs.test_code }}
        run: |
          echo "Applying tests..."
          node .github/scripts/generate-bug-fix/apply-tests.js
          echo "Files after tests:"
          git status -s

      - name: Provision CI Environment
        run: |
          make provision-ci
          brew install swiftlint

      - name: Sync Xcode Project
        run: |
          make sync-ci

      - name: Run SwiftLint
        run: |
          echo "Running SwiftLint..."
          swiftlint lint --strict || {
            echo "‚ö†Ô∏è SwiftLint found issues. Attempting auto-fix..."
            swiftlint --fix --quiet
            git diff --name-only
            if [[ -n $(git status -s) ]]; then
              echo "‚úì SwiftLint auto-fixed some issues"
              git add .
              git commit -m "style: apply SwiftLint auto-fixes" || true
            fi
          }

      - name: Build Project
        run: |
          xcodebuild -workspace Canvas.xcworkspace \
            -scheme CITests \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            build-for-testing \
            | xcpretty

      - name: Run Tests
        if: ${{ !inputs.skip_tests }}
        run: |
          xcodebuild -workspace Canvas.xcworkspace \
            -scheme CITests \
            -sdk iphonesimulator \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
            test-without-building \
            | xcpretty

      - name: Commit and Push
        run: |
          ISSUE_KEY="${{ steps.jira-fetch.outputs.issue_key }}"
          BRANCH_NAME="auto-fix/${ISSUE_KEY}"

          git add .

          # Check if there are changes to commit
          if [[ -n $(git status -s) ]]; then
            git commit -m "fix: automated fix for ${ISSUE_KEY}

          This is an automated fix generated by Claude AI for Jira issue ${ISSUE_KEY}.

          Changes:
          - Applied code fix to affected files
          - Added/updated test coverage

          ü§ñ Generated with Claude Code

          Co-Authored-By: Claude <noreply@anthropic.com>"

            git push -u origin "$BRANCH_NAME"
            echo "‚úì Changes committed and pushed"
          else
            echo "‚ö†Ô∏è No changes to commit - this might indicate the fix wasn't applied correctly"
            echo "Checking if SwiftLint already committed..."

            # Check if there are any commits on this branch
            COMMIT_COUNT=$(git rev-list --count HEAD ^origin/master 2>/dev/null || echo "0")

            if [[ "$COMMIT_COUNT" -gt 0 ]]; then
              echo "‚úì Found $COMMIT_COUNT commit(s) on branch (likely from SwiftLint auto-fix)"
              git push -u origin "$BRANCH_NAME"
            else
              echo "‚ùå No commits found and no changes to commit"
              echo "The fix may not have been applied. Check previous steps."
              exit 1
            fi
          fi

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_KEY: ${{ steps.jira-fetch.outputs.issue_key }}
          BUG_SUMMARY: ${{ steps.extract-info.outputs.bug_summary }}
          BUG_DESCRIPTION: ${{ steps.extract-info.outputs.bug_description }}
          FIX_CODE: ${{ steps.generate-fix.outputs.fix_code }}
          TEST_CODE: ${{ steps.generate-tests.outputs.test_code }}
          SKIP_TESTS: ${{ inputs.skip_tests }}
          AFFECTED_FILES: ${{ steps.extract-info.outputs.affected_files }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          node .github/scripts/generate-bug-fix/create-pr.js

      - name: Get PR URL
        id: pr-url
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ISSUE_KEY="${{ steps.jira-fetch.outputs.issue_key }}"
          BRANCH_NAME="auto-fix/${ISSUE_KEY}"

          PR_URL=$(gh pr list --head "$BRANCH_NAME" --json url --jq '.[0].url')
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT

      - name: Post PR Link to Jira
        env:
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          ISSUE_KEY: ${{ steps.jira-fetch.outputs.issue_key }}
          PR_URL: ${{ steps.pr-url.outputs.pr_url }}
        run: |
          node .github/scripts/generate-bug-fix/post-pr-link-to-jira.js
